from app import app
import MySQLdb
from flask import jsonify
#from pandas import read_sql
#from flask_table import Table, Col
#from flask import request
from flask import render_template, request
import copy
import time
import datetime
from  collections import Counter
import redis
#db = MySQLdb.connect(host="ec2-54-158-19-194.compute-1.amazonaws.com", user="venmo", passwd="pass", db="VenmoDB")
#cursor = db.cursor()

#class ItemTable(Table):
#	Time = Col('Time')
#	User1 = Col('From')
#	User2 = Col('To')
#	Amount = Col('$')
#	Message = Col('Message')
#	Verified = Col('Verified')

#user = 2

@app.route('/')

@app.route('/transactions/<int:user>')

def get_tran_data(user):
	db = MySQLdb.connect(host="ec2-54-158-19-194.compute-1.amazonaws.com", user="venmo", passwd="pass", db="VenmoDB")
	cursor = db.cursor()
	#user2 = 10
	#request = "SELECT * FROM Transaction_NT limit %(user)d"
	#response = cursor.execute(request,params={'user': user})
	query_string = "SELECT * FROM Transactions WHERE ID1={user} OR ID2={user} ORDER BY Time DESC limit 20".format(user=user)
	#query_string = "SELECT * FROM Transaction_NT LIMIT 10"
	#return query_string 
	response = cursor.execute(query_string)
	response = cursor.fetchall()
	#cursor.close()
	#db.close()
	response_list = []
        for val in response:
        	response_list.append(val)
	jsonresponse = [{"Time": x[5], "From": x[2], "To": x[4], "Message":x[6], 
			 "Amount":  x[7], "Verified": "Verified" if x[8] else "Not verified"} for x in response_list]
	query_string = "SELECT * FROM Users WHERE ID={user}".format(user=user)
	response = cursor.execute(query_string)
	response = cursor.fetchall()
	cursor.close()
	User = [{"Name": response[0][1]}]
        #table = ItemTable(jsonrsponse)
	#print(table.__html__())
	return render_template("transactions.html", output = jsonresponse, User = User)
	#return jsonify(user=User)

@app.route('/friends/<int:user>')

def get_friends_data(user):
	db = MySQLdb.connect(host="ec2-54-158-19-194.compute-1.amazonaws.com", user="venmo", passwd="pass", db="VenmoDB")
        cursor = db.cursor()
        query_string = "SELECT ID2 FROM Friends WHERE ID1={user} limit 7".format(user=user)
        response = cursor.execute(query_string)
        response = cursor.fetchall()
        response_list = []
	response_list_FN = []
        for val in response:
                response_list.append(val[0])
		query_string = "SELECT FullName FROM Users WHERE ID={user}".format(user=val[0])
	        response_name = cursor.execute(query_string)
        	response_name = cursor.fetchall()
		response_list_FN.append(response_name[0][0])

        friends_lists=[]
        for friend in response_list:
               query_string_ff = "SELECT ID2 FROM Friends WHERE ID1={user} limit 7".format(user=friend)
               response = cursor.execute(query_string_ff)
               response = cursor.fetchall()
               response_listf = []
               for val in response:
               	       query_string = "SELECT FullName FROM Users WHERE ID={user}".format(user=val[0])
                       response_name = cursor.execute(query_string)
                       response_name = cursor.fetchall()
                       response_listf.append(response_name[0][0])
               friends_lists.append(response_listf)

        jsonresponse = [{"Friend": str(response_list_FN[i]).strip('[]'),"FriendID":response_list[i], 
			"Friends": str(friends_lists[i]).strip('[]').replace("\'","") } for i in range(0,len(response_list))]
        #table = ItemTable(jsonrsponse)
        #print(table.__html__())
        #return render_template("transactions.html", output=jsonresponse)
        #return jsonify(friends=jsonresponse)
        query_string = "SELECT * FROM Users WHERE ID={user}".format(user=user)
        response = cursor.execute(query_string)
        response = cursor.fetchall()
        cursor.close()
        User = [{"Name": response[0][1]}]
	return render_template("friends.html", output = jsonresponse, User = User)

@app.route('/statistics')

def statistica():
    
    rediska = redis.StrictRedis(host='ec2-34-207-202-197.compute-1.amazonaws.com', port=6379, db=0)

    all_t = []
    av_t = []

    st = time.time()
    
    for i in range(20,-1,-1):
    	ts = datetime.datetime.fromtimestamp(st-i).strftime('%Y-%m-%d %H:%M:%S')
    
    	listik = rediska.lrange(ts,0,-1)
    
    	all = len(listik)
    	c = Counter(listik)
    	trues = c['True']

    	all_t.append([st-i,all])
    	av_t.append([st-i,t
    return jsonify(all_t = all_t, av_t = av_t)

@app.route('/stat')

def index():
    return render_template('index.html')

